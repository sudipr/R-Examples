name<-"sudip"
age<-24
x<-TRUE
numbers[1]
numbers[c(1:4)]
vector<-c(1,2,3,4)
foo<-matrix(vector,nrow=2,ncol=2)
foo
foo[1,]
foo[,2]
a<-matrix(rep(1,4),c(2,2))
b<-matric(rep(2,4),c(2,2))
a<-matrix(rep(1,4),c(2,2))
b<-matrix(rep(2,4),c(2,2))
a
b
foo<-array(c(a,b),c(2,2,2))
foo
foo[,1,1]
foo[,1,2]
foo[1,2]
foo[,1,2]
foo[,2,2]
foo[,2,1]
name<-c('raj','rani','ranveer')
age<-c(23,22,26)
gender<-c('male','female','male')
data.frame(name,age,gender)
df$name
df<-data.frame(name,age,gender)
df$name
df[1,]
df[,2]
df[2,]
gender<-c('male','female','male','male')
gender_factor<-factor(gender)
gender_factor
vec<-c(1:4)
mat<-matrix(vec,c(2,2))
vec
mat
li<-list(vec,mat)
li
li[1]
li[2]
li[3]
li[[2]],[1,]
li[[2]],[1,]
li[2],[1,]
li[2]
li[2][1,]
li[1]
li[[2[]][1,]
li[[2][1,]
li[[2]][1,]
age<-c(24,24,25,27,29)
gender<-c('m','f','m','m','m')
fac_gender<-factor(gender)
fac_gender
tapply(age,fac_gender,mean)
list<-list(a=c(1,2),b=c(2,3),c=c(3,3))
list
vapply(list,mean,FUN.VALUE = double(1))
list<-list(rep(1,4),rep(2,3),rep(3,2),rep(4,1))
list
mapply(rep,1:4,4:1)
install.packages('dplyr')
library("dplyr", lib.loc="~/R/win-library/3.4")
library('dplyr')
head(mtcars)
select(mtcars,mpg,hp,disp)
select(mtcars,mpg:hp)
select(mtcars,miles_per_gallon,mpg)
select(mtcars,miles_per_gallon=mpg)
head(mtcars)
filter(mtcars,cyl=4)
filter(mtcars,cyl==4)
filter(mtcars,cyl==4 & hp>60)
filter(mtcars,cyl==4 , hp>60)
filter(mtcars,cyl==4 | hp>60)
head(mtcars)
arrange(mtcars,cyl,disp)
arrange(mtcars,desc(cyl))
mutate(mtcars,my_disp=disp/1.3)
mutate(mtcars,my_disp=disp/2)
summarise(mtcars,mean(disp))
summarise(group_by(mtcars,cyl),mean(disp))
summarise(group_by(mtcars,cyl),mean(disp),sd(disp),max(disp),min(disp))
count<-table(mtcars$gear)
count
barplot(count)
barplot(count,horiz=TRUE)
barplot(count,main="Simple Bar Plot",xlab="Improvement",ylab="Frequency",
legend=rownames(count),col=c("red","yellow","green")
barplot(count,main="Simple Bar Plot",xlab="Improvement",ylab="Frequency",
legend=rownames(count),col=c("red","yellow","green"))
barplot(count,main="Simple Bar Plot",xlab="Improvement",ylab="Frequency",legend=rownames(count),col=c("red","yellow","green"))
barplot(count,main="Simple Bar Plot",xlab="Improvement",ylab="Frequency"
,legend=rownames(count),col=c("red","yellow","green"))
barplot(count,horiz=TRUE)
barplot(count,main="Simple Bar Plot",xlab="Improvement",ylab="Frequency"
,legend=rownames(count),col=c("red","yellow","green"))
count <-table(mtcars$vs,mtcars$gear)
barplot(count,main="Car distribution gear and vs",xlab="Number of gears"
,legend=rownames(count),col=c("grey","cornflowerblue"))
barplot(count,main="Car distribution gear and vs",xlab="Number of gears"
,legend=rownames(count),col=c("grey","cornflowerblue"),beside = TRUE)
install.packages('plotrix')
install.packages('plotrix')
library('plotrix')
?pie()
pie(slices,labels=lbls,main='Pie Chart')
slices<-c(10,20,30,40,50)
lbls<-c('US','France','Australia','Germany','UK')
pie(slices,labels=lbls,main='Pie Chart')
pct<-round(slices/sum(slices)*100)
lbls<-paste(lbls,' ',pct,'%',seq='')
lbls
pie(slices,labels=lbls,main='Pie chart with %',col=rainbow(5)
pie(slices,labels=lbls,main='Pie chart with %',col=rainbow(5))
pie(slices,labels=lbls,main='Pie chart with %',col=rainbow(5),explode=0.0)
pie(slices,labels=lbls,main='Pie chart with %',col=rainbow(5))
pie3D(slices,labels=lbls,main='Pie chart with %',col=rainbow(5),explode=0.0)
table(full$Sex,full$Title)
str(full)
full$Surname<-sapply(full$Name,function(x) strsplit(x, split = '[,.]')[[1]][1])
full$Surname
View(test)
full$FSize<-full$SibSp+full$Parch+1
full$Family<-paste(full$SibSp,full$FSize,sep='_')
full$Family
ggplot(full[1:891,], aes(x = Fsize, fill = factor(Survived))) +
geom_bar(stat='count', position='dodge') +
scale_x_continuous(breaks=c(1:11)) +
labs(x = 'Family Size') +
theme_few()
ggplot2(full[1:891,], aes(x = Fsize, fill = factor(Survived))) +
geom_bar(stat='count', position='dodge') +
scale_x_continuous(breaks=c(1:11)) +
labs(x = 'Family Size') +
theme_few()
library('ggplot2')
ggplot(full[1:891,], aes(x = Fsize, fill = factor(Survived))) +
geom_bar(stat='count', position='dodge') +
scale_x_continuous(breaks=c(1:11)) +
labs(x = 'Family Size') +
theme_few()
library('ggplot2')# visualization
library('ggthemes')# visualization
library('scales')# visualization
library('dplyr')# data manipulation
library('mice')# imputation
library('randomForest')
ggplot(full[1:891,], aes(x = Fsize, fill = factor(Survived))) +
geom_bar(stat='count', position='dodge') +
scale_x_continuous(breaks=c(1:11)) +
labs(x = 'Family Size') +
theme_few()
ggplot(full[1:891,], aes(x = FSize, fill = factor(Survived))) +
geom_bar(stat='count', position='dodge') +
scale_x_continuous(breaks=c(1:11)) +
labs(x = 'Family Size') +
theme_few()
full$FSizeD[full$FSize==1]
full$FSizeD[full$FSize<5 & full$FSize>1]
full$FSizeD[full$FSize>4]
?mosiacplot()
?mosaicplot
mosaicplot(table(full$FSizeD,full$Survived),main='Family Size By survival',shade=True)
full$FSizeD[full$FSize==1]
full$FSizeD[full$FSize<5 & full$FSize>1]
full$FSizeD[full$FSize>4]
mosaicplot(table(full$FSizeD,full$Survived),main='Family Size By survival',shade=True)
nrow(full$FSizeD)
table(full$FSizeD)
ggplot(full[1:891,], aes(x = FSize, fill = factor(Survived))) +
geom_bar(stat='count', position='dodge') +
scale_x_continuous(breaks=c(1:11)) +
labs(x = 'Family Size') +
theme_few()
full$FSize
full$FSizeD
full$FSizeD[full$FSize==1]
full$FSizeD[full$FSize<5 & full$FSize>1]
table(full$Survived)
full$FSizeD[full$FSize==1]
full$FSizeD[full$FSize==1]<- 'singleton'
full$FSizeD[full$FSize<5 & full$FSize>1]<- 'small'
full$FSizeD[full$FSize>4]<- 'large'
mosaicplot(table(full$FSizeD,full$Survived),main='Family Size By survival',shade=True)
mosaicplot(table(full$FSizeD,full$Survived),main='Family Size By survival',shade=TRUE)
range(train$Fare)
train<-read.csv(file.choose(),header=T)
range(train$Fare)
View(train)
?boxplot
?boxplot(train$Age~train$Class,xlab="Class",ylab="Age",col=c("red"))
boxplot(train$Age~train$Class,xlab="Class",ylab="Age",col=c("red"))
boxplot(train$Age~train$PClass,xlab="Class",ylab="Age",col=c("red"))
boxplot(train$Age ~ train$PClass,xlab="Class",ylab="Age",col=c("red"))
boxplot(train$Age ~ train$Class,xlab="Class",ylab="Age",col=c("red"))
actual_mode<-table(train$Age)
actual_mode
names(actual_mode)[actual_mode==max(actual_mode)]
median(train$Fare)
boxplot(train$Age ~ train$Class,xlab="Class",ylab="Age",col=c("red"))
boxplot(train$Age ~ train$PClass,xlab="Class",ylab="Age",col=c("red"))
var(train$Fare)
sqrt(var(train$Fare))
iris
iris<-read.csv(file.choose(),header=FALSE)
head(iris)
iris
names(iris)<-c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width", "Species")
head(iris)
iris
library("ggvis")
install.packages("ggvis")
library("ggvis")
iris %>% ggvis(~Sepal.Length, ~Sepal.Width, fill = ~Species) %>% layer_points(
iris %>% ggvis(~Sepal.Length, ~Sepal.Width, fill = ~Species) %>% layer_points()
iris %>% ggvis(~Sepal.Length, ~Sepal.Width, fill = ~Species) %>% layer_points()
iris %>% ggvis(~Sepal.Length, ~Sepal.Width, fill = ~Species) %>% layer_points()
iris %>% ggvis(~Petal.Length, ~Petal.Width, fill = ~Species) %>% layer_points()
x<-levels(iris$Species)
cor(iris$Petal.Length,iris$Petal.Width)
x<-levels(iris$Species)
x
print(x[1])
cor(iris[iris$Species==x[1].1:4])
cor(iris[iris$Species==x[1].1:4])
cor(iris[iris$Species==x[1],1:4])
print[x[2]]
print(x[2])
cor(iris[iris$Species==x[2],1:4])
print(x[2])
cor(iris[iris$Species==x[2],1:4])
# Print Virginica correlation matrix
print(x[3])
cor(iris[iris$Species==x[3],1:4]
cor(iris[iris$Species==x[3],1:4]
cor(iris[iris$Species==x[3],1:4])
iris
head(iris)
str(iris)
table(iris$Species)
round(prop.table(table(iris$Species))*100 * digits=1)
round(prop.table(table(iris$Species))*100 , digits=1)
summary(....)
summary(....[c("Petal.Width", "Sepal.Width")])
summary(....[c("Petal.Width", "Sepal.Width")])
summary([c("Petal.Width", "Sepal.Width")])
summary(iris)
iris_norm<-as.data.frame(lapply(iris,normalize))
normalize<-function(x)
{
num<-x-min(x)
denom<-max(x)-min(x)
return (num/denom)
}
iris_norm<-as.data.frame(lapply(iris,normalize))
iris_norm<-as.data.frame(lapply(iris[1:4],normalize))
iris_norm<-as.data.frame(lapply(iris[1:4],normalize))
summary(iris_norm)
set.seed(1234)
ind <- sample(2, nrow(iris), replace=TRUE, prob=c(0.67, 0.33))
iris.traning<-iris[ind==1,1:4]
head(iris.traning)
iris.test<-iris[ind==2,1:4]
head(iris.test)
iris.test<-iris[ind==2,1:4]
head(iris.test)
# Compose `iris` training labels
iris.trainLabels <- iris[ind==1,5]
# Inspect result
print(iris.trainLabels)
# Compose `iris` test labels
iris.testLabels <- iris[ind==2, 5]
# Inspect result
print(iris.testLabels)
x=6
if(x>7){
x=x+1
}else if(x>8){
x=x+2
}else {
x=x+3}
print(x)
n = 5
sum = 1
while(n!=0)
{
sum = sum*n
print(sum)
n = n - 1
if(sum > 50)
{
print("It’s gonna rain")
}
else
{
print("It’s not gonna rain")
}
}
n=100
sum=0
for(i in seq(1,n,1)){
sum=sum+i
print(c(i,sum))
if(sum>15)
break
}
x1<-matrix(1:9,3,3)
x2<-matrix(11:19,3,3)
m = rbind(apply(x1,1,sum),apply(x2,1,sum))
y = apply(m,1,mean)
print(y)
x1<-matrix(1:9,3,3)
x2<-matrix(11:19,3,3)
m = rbind(apply(x1,1,sum),apply(x2,1,sum))
y = apply(m,1,mean)
print(y)
matrix?
print(y)
x = c(1:4)
y = c(6,7)
print(x + y)
x = c(1:4)
y = c(6,7)
print(x + y)
x = c(1:4)
y = c(6,7)
print(x + y)
x = c(1:4)
x
y = c(6,7)
y
x <- c("a",1, 3>2)
print(as.logical(x))
vec1 = c(1,2,3)
vec2 = c("R","Scilab","Java")
vec3 = c("For prototyping", "For prototyping", "For Scaleup")
mylist<-c(vec1,vec2,vec3)
mylist
mylist[[2]][3] = "matlab"
mylist[2][3] = "matlab"
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
mylist[2,3] = "matlab"
mylist[2]3 = "matlab"
mylist[2,3] = "matlab"
mylist[2][3] = "matlab"
mylist[[2]][3] = "matlab"
mylist<-list(vec1,vec2,vec3)
mylist
mylist[[2]][3] = "matlab"
mylist
list(mylist, list(vec4, c(10,11,12)))
list(vec4 = c("10","11","12"), mylist)
mylist
mylist  = list(“vec4” = c(10,11,12))
mylist  = list("vec4" = c(10,11,12))
mylist
mylist<-list(vec1,vec2,vec3)
mylist
list(vec4 = c("10","11","12"), mylist)
A =matrix(c(1:9), nrow = 1, ncol = 9, byrow = T)
A
A =matrix(c(1:9), nrow = 9, ncol = 1, byrow = F)
A
A[2,]
A[2,3]
A[3,2]
A =matrix(c(1:9), nrow = 3, ncol = 3, byrow = T)
A
A[2,3]
diag[A] = c("99","100","101")
diag[A] = c(99,100,101)
diag(A) = c[99,100,101]
diag(A) = c(99,100,101)
A
x <- matrix(1:4, 2, 2)
y <- matrix(rep(10, 4), 2, 2)
x
y
print(x*y)
circle_mimo= function(dia)
{
area=(pi*dia^2)/4
circum=pi*dia
result=c("area"=area, "circum"=circum)
return(result)
}
circle_mimo(4)
x <- 1
f <- function() {
y <- 2
return(c(x, y))
}
f()
X<-3
Y<-x+3
return(c(X,Y))
}
print(Y)
func <- function(){
X<-3
Y<-x+3
return(c(X,Y))
}
print(Y)
func <- function(){
X<-3
Y<-x+3
return(c(X,Y))
}
print(Y)
c(X,Y)
x
vec1 = c(1,2,3)
vec2 = c("R","Scilab","Java")
vec3 = c("For prototyping", "For prototyping", "For Scaleup")
df<-data.frame(vec1,vec2,vec3)
df
print(df[1,2,])
print(df[,1,2])
print(df[1:2,])
rbind(df,data.frame(vec1=4,vec2="C",vec3="For Scaleup"))
pd =data.frame ("Name"=c("Senthil","Senthil","Sam", "Sam"), "Month"=c("Jan","Feb","Jan","Feb"), "BS" = c(141.2,139.3,135.2,160.1),
"BP" = c(90,78,80,81))
pd
subset[pd, pd$BS > 140]
subset(pd, pd$BS > 140)
library(reshape2)
pd_new = recast(pd,id.var=c("Name","Month"),variable+Month~Name)
print(pd_new)
a = data.frame(x1= c("A","B","C"), x2=1:3)
b = data.frame(x1= c("A","B","D"), x2=c("Yes","No","Yes"))
a
b
left_join(b,a,by='x1')
left_join(by='x1',b,a)
setwd("D:/SimpliLearn_DataScience/R-Examples/Titanic")
train<-read.csv("train.csv")
test<-read.csv("test.csv")
library(rpart)
fit<-rpart(Survived~Pclass + Sex + Age + SibSp + Parch + Fare + Embarked,
date=train,method = "Class")
#set working directory and import datafiles
setwd("D:/SimpliLearn_DataScience/R-Examples/Titanic")
train<-read.csv("train.csv")
test<-read.csv("test.csv")
#Look at gender patterns
summary(train$Sex)
prop.table(table(train$Sex,train$Survived))
prop.table(table(train$Sex,train$Survived),1)
# Create new column in test set with our prediction that everyone dies
test$Survived<-0
# Update the prediction to say that all females will survive
test$Survived[test$Sex=='female']<-1
# Create submission dataframe and output to file
submit<-data.frame(PassengerID=test$PassengerId,Survived=test$Survived)
write.csv(submit,file='output2.csv',row.names = FALSE)
test$Survived<-0
# Update the prediction to say that all females will survive
test$Survived[test$Sex=='female']<-1
fit<-rpart(Survived~Pclass + Sex + Age + SibSp + Parch + Fare + Embarked,
date=train,method = "Class")
fit<-rpart(Survived ~Pclass + Sex + Age + SibSp + Parch + Fare + Embarked,
date=train,method = "class")
train<-read.csv("train.csv")
test<-read.csv("test.csv")
library(rpart)
fit<-rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked,
date=train,method = "class")
fit<-rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked,
data = train,method = "class")
plot(fit)
text(fit)
install.packages('rattle')
install.packages('rpart.plot')
install.packages('RColorBrewer')
library(rattle)
library(rpart.plot)
library(RColorBrewer)
install.packages('rattle')
install.packages('rpart.plot')
install.packages('RColorBrewer')
install.packages("rattle")
fancyRpartPlot(fit)
fancyRpartPlot(fit)
library(rattle)
library(rpart.plot)
library(RColorBrewer)
fancyRpartPlot(fit)
Prediction <- predict(fit, test, type = "class")
submit <- data.frame(PassengerId = test$PassengerId, Survived = Prediction)
write.csv(submit, file = "Example3DecisoinTree.csv", row.names = FALSE
write.csv(submit, file = "Example3DecisoinTree.csv", row.names = FALSE)
submit <- data.frame(PassengerId = test$PassengerId, Survived = Prediction)
write.csv(submit, file = "Example3DecisoinTree.csv", row.names = FALSE)
setwd("D:/SimpliLearn_DataScience/R-Examples)
train<-read.csv(file.choose(),header=""TRUE)
setwd("D:/SimpliLearn_DataScience/R-Examples")
train<-read.csv(file.choose(),header=""TRUE)
train<-read.csv(file.choose(),header="TRUE")
str(train)
input<-read.csv(file.choose(),header="TRUE")
input<-read.csv(file.choose(),header="TRUE")
input<-read.csv(file.choose(),header="TRUE")
input<-read.csv(file.choose(),header="TRUE")
input<-read.csv(file.choose(),header= TRUE)
input<-read.csv(file.choose(),header= TRUE)
