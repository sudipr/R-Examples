DF<-data.frame(x = c(1, 2, 3), y = c(0, 10, NA),z=c("xx","zz","yy"))
DF
DF$yDF$y==10<-NA
DF$y[DF$y==10]<-NA
DF
na.omit(DF)
DF$y[DF$y==NA]<-10
DF
DF<-data.frame(x = c(1, 2, 3), y = c(0, 10, NA),z=c("xx","zz","yy"))
DF
DF$y[DF$y==NA]<-10
DF
read.csv(file.choose(),header=T)
test<-read.csv(file.choose(),header=T)
head(test)
View(test)
View(train)
View(test)
DF$y[is.na(DF$y)]<-2
DF
mean<-mean(DF$y)
mean
DF
DF<-data.frame(x = c(1, 2, 3), y = c(0, 10, NA),z=c("xx","zz","yy"))
mean<-mean(DF$y)
mean
mean(DF$y,na.rm=T)
DF
xx<- matrix(c(12,10,11,44,    16,    13,    53,    92,    81,    80,    52,    19,    77,    85,    23,    58,    94,    77,    14,    38,    59,    22,    65,    69,    60,    66,    93,    81,    52,    93),nrow=10,byrow=F)
xx
rownames(xx)<-c("Day1",    "Day2",    "Day3",    "Day4",    "Day5",    "Day6",    "Day7",    "Day8",    "Day9",    "Day10")
xx
colnames(xx)<-c("c1","c2","c3")
xx
max(xx[1,])
max(xx[1:10])
for
?for
for c in 1:10
{
row<xx[1,]
max<-max(row)
print(max)
}
for(c in 1:10)
{
row<xx[1,]
max<-max(row)
print(max)
}
for(c in 1:10)
{
row<xx[c,]
max<-max(row)
print(max)
}
for(c in 1:10)
{
row<xx[c,]
max<-max(row)
print(max)
}
for(c in 1:10)
{
row<-xx[c,]
max<-max(row)
print(max)
}
for(i in 1:10)
{
print(max(xx[1,]))
}
for(i in 1:10)
{
print(max(xx[i,]))
}
apply(xx,1,max)
apply(xx,0,max)
apply(xx,2,max)
apply(xx,1,mean)
xx
xx.frame<-data.frame(C1=c(12,    10,    11,    44,    16,    13,    53,    92,    81,    80),C2=c(52,    19,    77,    85,    23,    58,    94,    77,    14,    38),C3=c(59,    22,    65,    69,    60,    66,    93,    81,    52,    93))
xx
xx.frame
class(xx.frame)
xx.frame$days<-c("one","two","three","Four","five","six","seven","eight","nine","ten")
xx.frame
xx.frame$new<-1
xx.frame
xx.frame$days<-c("one","two","three","Four","five","six","seven","eight","nine","ten")
xx.frame
r<-xx.frame[,-4]
r
r<-xx.frame[,-3]
r
r<-xx.frame[,-4]
r
r[8,3]<NA
r[8,3]<-NA
r
apply(r,2,,mean)
apply(r,2,mean)
r<-r[,c(4,1:3)]
r
train<-read.csv(file.choose(),sep=',',header=T)
test<-read.csv(file.choose(),sep=',',header=T)
nrow(train)
nrow(test)
tapply(train$Fare,train$Pclass,mean,na.rm=T)
combi<-rbind(train,test)
test$Survived<-0
combi<-rbind(train,test)
combi
nrow(combi)
combi$Name
class(combi$Name)
combi$Name[1]
strsplit(combi$Name[1], split='[,.]')
strsplit(combi$Name[1], split='[,.]')
combi$Name[1]
strsplit(combi$Name[1], split='[,.]')
strsplit(combi$Name[1], split='[,.]')[[1]][2]
strsplit(combi$Name[1], split='[,.]')[[1]][3]
combi$Name<-as.character(combi$Name)
combi$Name[1]
strsplit(combi$Name[1], split='[,.]')
strsplit(combi$Name[1], split='[,.]')[[1]][2]
strsplit(combi$Name[1], split='[,.]')[[1]][3]
f<-function(x)
{
strsplit(x, split='[,.]')[[1]][2]
}
f(combi$Name[1])
combi$Title<-sapply(combi$Name,f)
combi$Title
table(combi$Title)
table(combi$Title,combi$Sex)
combi$Title <- sub(' ', '', combi$Title)
table(combi$Title,combi$Sex)
combi$Title[combi$Title %in% c('Lady', 'the Countess', 'Mlle', 'Mee', 'Ms')] <- 'Miss'
combi$Title[combi$Title %in% c('Capt', 'Don', 'Major', 'Sir', 'Col', 'Jonkheer', 'Rev', 'Dr', 'Master') & combi$Sex == "male" ] <- 'Mr'
table(combi$Title,combi$Sex)
combi$Title[combi$Title %in% c('Dona',"Dr","Mme") & combi$Sex == "female"] <- 'Mrs'
table(combi$Title,combi$Sex)
groceries<-read.csv(file.choose(),header = T)
table(groceries)
View(groceries)
install.packages('arules')
library('arules')
table(groceries)
Groceries<-read.transactions(file.choose(),sep=',')
table(Groceries)
inspect(Groceries[1:5,])
summary(Groceries)
itemFrequencyPlot(Groceries,topN=20,type='absolute')
itemFrequencyPlot(Groceries,topN=20)
rules <- apriori(Groceries, parameter = list(supp = 0.001, conf = 0.8,minlen=2), control = list(verbose=F,sort=F))
inspect(rules[1:5])
summary(rules)
rules<-sort(rules, by="confidence", decreasing=TRUE)
inspect(rules[1:5])
rules<-apriori(data=Groceries,parameter=list(supp=0.001,conf = .8),appearance = list (  default="lhs",rhs="whole milk"),control = list(verbose=F))
rules<-apriori(data=Groceries,parameter=list(supp=0.001,conf = .8),appearance = list (  default="lhs",rhs="whole milk"),control = list(verbose=F))
rules<-sort(rules, decreasing=TRUE,by="confidence")
inspect(rules[1:5])
uni<-read.csv(file.choose(),header = T)
table(uni)
head(uni)
nrow(uni)
head(input)
input<-read.csv(file.choose(),header = T)
head(input)
mydata<-input[1:25,1:7]
head(input)
mydata<- input[1:25,1:7]
normalized_data<-scale(mydata[,2:7])
normalized_data
d <- dist(normalized_data, method = "euclidean")
fit <- hclust(d, method="complete")
plot(fit)
groups <- cutree(fit, k=4)
rect.hclust(fit, k=5, border="red")
install.packages('rpart')
data<-read.csv(file.choose(),header=T)
str(data)
data$NSPF<-as.factor(data$NSP)
set.seed(1234)
train<- data[pd==1,]
validate<-data[pd==2,]
pd<-sample(2, nrow(data),replace=T,prob=c(.8,.2))
train<- data[pd==1,]
validate<-data[pd==2,]
tree1<-rpart(NSPF~LB+AC+FM,train)
library("rpart")
tree1<-rpart(NSPF~LB+AC+FM,train)
install.packages("rpart.plot")
library("rpart.plot")
rpart.plot(tree1)
file<-read.csv(file.choose(),header=T)
str(gc)
gc<-read.csv(file.choose(),header=T)
str(gc)
gc$Default<-factor(gc$Default)
names(gc)
fit<-glm(Default ~ age, data=gc, family="binomial")
summary(fit)
1-pchisq(fit$null.deviance-fit$deviance,fit$df.null-fit$df.residual)
fit<-glm(Default ~ age, data=gc, family="binomial")
summary(fit)
1-pchisq(fit$null.deviance-fit$deviance,fit$df.null-fit$df.residual)
install.packages('e1071')
kk<-naiveBayes(NSPF~LB+AC+FM,train)
library('e1071')
kk<-naiveBayes(NSPF~LB+AC+FM,train)
attach(train)
kk
numbers[c[1:4]]
numbers[c(1:4)]
numbers<-c(10,20,30)
chars<-c('a','b','c')
bools<-c(TRUE,FALSE)
name<-"sudip"
age<-24
x<-TRUE
numbers[1]
numbers[c(1:4)]
vector<-c(1,2,3,4)
foo<-matrix(vector,nrow=2,ncol=2)
foo
foo[1,]
foo[,2]
a<-matrix(rep(1,4),c(2,2))
b<-matric(rep(2,4),c(2,2))
a<-matrix(rep(1,4),c(2,2))
b<-matrix(rep(2,4),c(2,2))
a
b
foo<-array(c(a,b),c(2,2,2))
foo
foo[,1,1]
foo[,1,2]
foo[1,2]
foo[,1,2]
foo[,2,2]
foo[,2,1]
name<-c('raj','rani','ranveer')
age<-c(23,22,26)
gender<-c('male','female','male')
data.frame(name,age,gender)
df$name
df<-data.frame(name,age,gender)
df$name
df[1,]
df[,2]
df[2,]
gender<-c('male','female','male','male')
gender_factor<-factor(gender)
gender_factor
vec<-c(1:4)
mat<-matrix(vec,c(2,2))
vec
mat
li<-list(vec,mat)
li
li[1]
li[2]
li[3]
li[[2]],[1,]
li[[2]],[1,]
li[2],[1,]
li[2]
li[2][1,]
li[1]
li[[2[]][1,]
li[[2][1,]
li[[2]][1,]
age<-c(24,24,25,27,29)
gender<-c('m','f','m','m','m')
fac_gender<-factor(gender)
fac_gender
tapply(age,fac_gender,mean)
list<-list(a=c(1,2),b=c(2,3),c=c(3,3))
list
vapply(list,mean,FUN.VALUE = double(1))
list<-list(rep(1,4),rep(2,3),rep(3,2),rep(4,1))
list
mapply(rep,1:4,4:1)
install.packages('dplyr')
library("dplyr", lib.loc="~/R/win-library/3.4")
library('dplyr')
head(mtcars)
select(mtcars,mpg,hp,disp)
select(mtcars,mpg:hp)
select(mtcars,miles_per_gallon,mpg)
select(mtcars,miles_per_gallon=mpg)
head(mtcars)
filter(mtcars,cyl=4)
filter(mtcars,cyl==4)
filter(mtcars,cyl==4 & hp>60)
filter(mtcars,cyl==4 , hp>60)
filter(mtcars,cyl==4 | hp>60)
head(mtcars)
arrange(mtcars,cyl,disp)
arrange(mtcars,desc(cyl))
mutate(mtcars,my_disp=disp/1.3)
mutate(mtcars,my_disp=disp/2)
summarise(mtcars,mean(disp))
summarise(group_by(mtcars,cyl),mean(disp))
summarise(group_by(mtcars,cyl),mean(disp),sd(disp),max(disp),min(disp))
count<-table(mtcars$gear)
count
barplot(count)
barplot(count,horiz=TRUE)
barplot(count,main="Simple Bar Plot",xlab="Improvement",ylab="Frequency",
legend=rownames(count),col=c("red","yellow","green")
barplot(count,main="Simple Bar Plot",xlab="Improvement",ylab="Frequency",
legend=rownames(count),col=c("red","yellow","green"))
barplot(count,main="Simple Bar Plot",xlab="Improvement",ylab="Frequency",legend=rownames(count),col=c("red","yellow","green"))
barplot(count,main="Simple Bar Plot",xlab="Improvement",ylab="Frequency"
,legend=rownames(count),col=c("red","yellow","green"))
barplot(count,horiz=TRUE)
barplot(count,main="Simple Bar Plot",xlab="Improvement",ylab="Frequency"
,legend=rownames(count),col=c("red","yellow","green"))
count <-table(mtcars$vs,mtcars$gear)
barplot(count,main="Car distribution gear and vs",xlab="Number of gears"
,legend=rownames(count),col=c("grey","cornflowerblue"))
barplot(count,main="Car distribution gear and vs",xlab="Number of gears"
,legend=rownames(count),col=c("grey","cornflowerblue"),beside = TRUE)
install.packages('plotrix')
install.packages('plotrix')
library('plotrix')
?pie()
pie(slices,labels=lbls,main='Pie Chart')
slices<-c(10,20,30,40,50)
lbls<-c('US','France','Australia','Germany','UK')
pie(slices,labels=lbls,main='Pie Chart')
pct<-round(slices/sum(slices)*100)
lbls<-paste(lbls,' ',pct,'%',seq='')
lbls
pie(slices,labels=lbls,main='Pie chart with %',col=rainbow(5)
pie(slices,labels=lbls,main='Pie chart with %',col=rainbow(5))
pie(slices,labels=lbls,main='Pie chart with %',col=rainbow(5),explode=0.0)
pie(slices,labels=lbls,main='Pie chart with %',col=rainbow(5))
pie3D(slices,labels=lbls,main='Pie chart with %',col=rainbow(5),explode=0.0)
table(full$Sex,full$Title)
str(full)
full$Surname<-sapply(full$Name,function(x) strsplit(x, split = '[,.]')[[1]][1])
full$Surname
View(test)
full$FSize<-full$SibSp+full$Parch+1
full$Family<-paste(full$SibSp,full$FSize,sep='_')
full$Family
ggplot(full[1:891,], aes(x = Fsize, fill = factor(Survived))) +
geom_bar(stat='count', position='dodge') +
scale_x_continuous(breaks=c(1:11)) +
labs(x = 'Family Size') +
theme_few()
ggplot2(full[1:891,], aes(x = Fsize, fill = factor(Survived))) +
geom_bar(stat='count', position='dodge') +
scale_x_continuous(breaks=c(1:11)) +
labs(x = 'Family Size') +
theme_few()
library('ggplot2')
ggplot(full[1:891,], aes(x = Fsize, fill = factor(Survived))) +
geom_bar(stat='count', position='dodge') +
scale_x_continuous(breaks=c(1:11)) +
labs(x = 'Family Size') +
theme_few()
library('ggplot2')# visualization
library('ggthemes')# visualization
library('scales')# visualization
library('dplyr')# data manipulation
library('mice')# imputation
library('randomForest')
ggplot(full[1:891,], aes(x = Fsize, fill = factor(Survived))) +
geom_bar(stat='count', position='dodge') +
scale_x_continuous(breaks=c(1:11)) +
labs(x = 'Family Size') +
theme_few()
ggplot(full[1:891,], aes(x = FSize, fill = factor(Survived))) +
geom_bar(stat='count', position='dodge') +
scale_x_continuous(breaks=c(1:11)) +
labs(x = 'Family Size') +
theme_few()
full$FSizeD[full$FSize==1]
full$FSizeD[full$FSize<5 & full$FSize>1]
full$FSizeD[full$FSize>4]
?mosiacplot()
?mosaicplot
mosaicplot(table(full$FSizeD,full$Survived),main='Family Size By survival',shade=True)
full$FSizeD[full$FSize==1]
full$FSizeD[full$FSize<5 & full$FSize>1]
full$FSizeD[full$FSize>4]
mosaicplot(table(full$FSizeD,full$Survived),main='Family Size By survival',shade=True)
nrow(full$FSizeD)
table(full$FSizeD)
ggplot(full[1:891,], aes(x = FSize, fill = factor(Survived))) +
geom_bar(stat='count', position='dodge') +
scale_x_continuous(breaks=c(1:11)) +
labs(x = 'Family Size') +
theme_few()
full$FSize
full$FSizeD
full$FSizeD[full$FSize==1]
full$FSizeD[full$FSize<5 & full$FSize>1]
table(full$Survived)
full$FSizeD[full$FSize==1]
full$FSizeD[full$FSize==1]<- 'singleton'
full$FSizeD[full$FSize<5 & full$FSize>1]<- 'small'
full$FSizeD[full$FSize>4]<- 'large'
mosaicplot(table(full$FSizeD,full$Survived),main='Family Size By survival',shade=True)
mosaicplot(table(full$FSizeD,full$Survived),main='Family Size By survival',shade=TRUE)
x<-4
f(4)
f<-function(x){
g<-function(y){
y+z
}
z<-4
x+g(x)
}
x<-4
f(4)
setwd("D:\SimpliLearn_DataScience\R-Examples")
setwd("D:/SimpliLearn_DataScience/R-Examples")
train<-read.csv(file.choose(),Header=T)
train<-read.csv(file.choose(),header=T)
head(train)
mean(train$Fare)
mode(train$Age)
actual_mode<-table(train$Age)
actual_mode
names(actual_mode)[actual_mode==max(actual_mode)]
median(train$Age)
median(train$Fare)
